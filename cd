Генератор предложений из нескольких функций

1. Вам нужно написать программу sentence_generator_rus.py, порождающую случайные грамматически правильные, но бессмысленные тексты на русском языке. В качестве образца программы вот аналог для английского: sentence_generator_eng.py порождает текст на английском языке, комбинируя случайно выбранные слова разных частей речи в грамматически правильную последовательность. Посмотрев эту программу (и позапускав ее), вы поймёте, как должна быть устроена ваша программа для русского языка и какие (примерно) в ней должны быть функции. Слова для русского языка вы можете выбирать сами, но ваша программа должна порождать русские предложения, которые с формальной точки зрения грамматичны (т.е. не возникает проблем типа несогласованное число/род/падеж и т.п. и не бывает явно недопустимого для русского языка порядка слов типа "увидел очень вася красивого котика"). 

2. Функции, естественно, не обязательно делать ровно такими же, как в программе-образце. Но каждая ваша функция должна делать какую-то одну определённую операцию -- таким образом, функций у вас в программе должно быть не одна и не две.

3. Для работы вам понадобится функция выбора случайного элемента из списка. Чтобы её использовать, в самом начале программы нужно написать ```import random``` -- это указание питону использовать встроенный модуль ```random```, в котором хранится нужная функция. А сама функция называется ```random.choice()```. Если у Вас есть список ```some_list```, то после строчки ```x = random.choice(some_list)``` икс станет равен какому-то случайно выбранному элементу этого массива. Все это сделано в коде-образце для английского, посмотрите туда. 

P.S. Пояснение про эту конструкцию:  
```
if __name__ == '__main__':
    main()
```
которую вы увидите в коде sentence_generator_eng.py. 

Это такой стандартный if, который проверяет, что код выполняется сам по себе, и тогда запускает то, что нужно запустить. В данном случае запускается функция ```main()```, которая уже запускает все остальное. Этот if нужен, чтобы ```main()``` не выполнялась в других случаях -- главным образом в тех, когда этот файл программы импортируется в какую-то другую программу. То есть вы можете написать программу, которая будет делать ```import sentence_generator_eng``` (который при этом должен лежать в той же папке), после чего в коде вашей новой программы использовать полезные функции из sentence_generator_eng.py, например, функцию verb_transitive или любую другую. Чтобы в момент ```import sentence_generator_eng```  не начала выполняться функция ```main()``` и не генерировалось предложение, и нужен этот if


P.P.S. Пояснения про текстовые комменты в функциях , которые имеют такой вид:
```
    ''' эта функция возвращает случайное существительное;
    у неё нет аргументов '''
```
это называется docstring. Фактически это просто строка, но она никак не используется в коде, а выполняет роль комментария. Так принято комментировать в питоне функции, методы  и разные другие штуки, которые представляют собой отдельные логически выделенные куски кода. Подробнее см. тут: https://www.datacamp.com/community/tutorials/docstrings-python).
